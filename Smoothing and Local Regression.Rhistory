# We will use KernelKnn, in the "KernelKnn" package
# The dataset we will work with describes attributes of wine ...
# We will actually only work with 2 columns of data -
# Proanthocyanins, which is column 10, and OD.Ratio, which is
# column 13
wine = cbind(wine_data[,10], wine_data[,13])
wine = as.data.frame(wine)
summary(wine)
colnames(wine)=c("Proanthocyanins", "OD.Ratio")
plot(wine$Proanthocyanins,wine$OD.Ratio)
?KernelKnn

# The weights_function determines the kernel, and the 
# default is NULL which is just the KNN ...
# We will create some test points to use to plot
# the model
attach(wine)
ProGrid = seq(5,35, by=1)
ProGrid=as.data.frame(ProGrid/10)
x = as.data.frame(wine$Proanthocyanins)
y = wine$OD.Ratio

knnFit = KernelKnn(data=x,y=y, regression = TRUE, TEST_data = ProGrid, k=10)
plotData=cbind(ProGrid,knnFit)
lines(plotData)

# Notice how choppy the plot is ... let's try to smooth
knnFit = KernelKnn(data=x,y=y, regression = TRUE, TEST_data = ProGrid, weights_function = 'gaussian', h=.5, k=10)
plotData=cbind(ProGrid,knnFit)
lines(plotData, col = "Red")


# If we vary the bandwidth parameter, we can smooth the curve
# as much as we want ...
knnFit = KernelKnn(data=x,y=y, regression = TRUE, TEST_data = ProGrid, weights_function = 'gaussian', h=.9, k=10)
plotData=cbind(ProGrid,knnFit)
lines(plotData, col = "Blue")


?loess
# We will do local regression on the same data ...
ProGrid = seq(5,35, by=1)
ProGrid=ProGrid/10
plot(wine)
fit=loess(OD.Ratio~Proanthocyanins, span = .2)
lines(ProGrid, predict(fit, data.frame(Proanthocyanins=ProGrid)), col="red",lwd=2)
fit=loess(OD.Ratio~Proanthocyanins, span = .1)
lines(ProGrid, predict(fit, data.frame(Proanthocyanins=ProGrid)), col="blue",lwd=2)
fit=loess(OD.Ratio~Proanthocyanins, span = .5)
lines(ProGrid, predict(fit, data.frame(Proanthocyanins=ProGrid)), col="green",lwd=2)

# Let's try these methods on a new dataset and
# see how accurately they predict
# Load in the bike share dataset
# First let's clean up
myData = BikeShare_Day
myData$instant=NULL
myData$dteday=NULL
myData$yr=NULL
myData$casual=NULL
myData$registered=NULL
myData$season=as.factor(myData$season)
myData$mnth=as.factor(myData$mnth)
myData$weekday=as.factor(myData$weekday)
myData$weathersit=as.factor(myData$weathersit)
summary(myData)
# We'll try KNN first
x = as.data.frame(model.matrix(cnt~.,myData)[,-1])
y=myData$cnt
# We'll do 5-fold CV again
dim(myData)
bins = sample(1:5,731, replace = TRUE)
binErrs = rep(0,5)
for(k in 1:5){
  train.x = scale(x[bins != k,])
  test.x = scale(x[bins == k,])
  train.y = y[bins != k]
  test.y = y[bins == k]
  knnFit = KernelKnn(data=train.x,y=train.y, regression = TRUE, TEST_data = test.x, weights_function = 'gaussian', h=.5, k=10)
  binErrs[k] = mean((test.y - knnFit)^2)
}
mean(binErrs)
sqrt(mean(binErrs))/mean(y)

# Note loess will not handle more than 4 predictors!
