# First load the gold target dataset
View(gold_target)
summary(gold_target)
myData = gold_target
myData$Lin = as.factor(myData$Lin)
myData$Gold = as.factor(myData$Gold)
summary(myData)

# The LDA functions are contained in the MASS package
gold.lda = lda(Gold~., data=myData)
summary(gold.lda)
gold.lda
train = sample(64,40)
gold.lda = lda(Gold~., data=myData, subset=train)
gold.pred = predict(gold.lda,myData[-train,])
names(gold.pred)
gold.class = gold.pred$class
table(gold.class,myData[-train,]$Gold)
mean(gold.class == myData[-train,]$Gold)

# Small sample size, still a good fit though
# Next load the blood donor dataset
View(bloodDonorData)
summary(bloodDonorData)
myData = bloodDonorData
myData$Donate = as.factor(myData$Donate)
summary(myData)
train = sample(748,500)

# Here we will use a QDA model ...
bloodDonor.model = qda(Donate~., data=myData, subset = train)

# This means there is collinearity - one of the Sigma-k matrices
# is not invertible.
plot(myData)

# Clearly frequency and amount are correlated ...
myData_2 = myData[,-5]
cor(myData_2)
bloodDonor.model = qda(Donate~. - Frequency, data=myData, subset = train)
bloodDonor.model
bloodDonate.class = predict(bloodDonor.model,myData[-train,])
table(bloodDonate.class$class,myData[-train,]$Donate)
mean(bloodDonate.class$class==myData[-train,]$Donate)
bloodDonor.ldamodel = lda(Donate~. - Frequency, data=myData, subset = train)
bloodDonate.class = predict(bloodDonor.ldamodel,myData[-train,])
table(bloodDonate.class$class,myData[-train,]$Donate)
mean(bloodDonate.class$class==myData[-train,]$Donate)

# We will apply Naive Bayes to a dataset with categorical 
# variables - load in the titanic dataset

# We will try to build a model that predicts survival based upon
# age (converted to a factor), sex, and pclass
myData = cbind(titanic[,"pclass"],titanic[,"survived"],titanic[,"sex"],titanic[,"age"])
dim(myData)
summary(myData)
myDataClean = na.omit((myData))
myDataClean[,1]=as.factor(myDataClean[,1])
myDataClean[,2]=as.factor(myDataClean[,2])
myDataClean[,3]=as.factor(myDataClean[,3])
summary(myDataClean)
myDataClean[,4] = ifelse(myDataClean[,4]<18,"child", "adult")
myDataClean[,4]=as.factor(myDataClean[,4])
summary(myDataClean)

# One popular implementation of naive Bayes is in the E1071 
# package
dim(myDataClean)
train = sample(1046,800)
nb.model = naiveBayes(survived~., data=myDataClean, subset = train)
nb.pred = predict(nb.model,myDataClean[-train,-2])
summary(nb.pred)
table(nb.pred,myDataClean[-train,2])
mean(nb.pred==myDataClean[-train,]$survived)

